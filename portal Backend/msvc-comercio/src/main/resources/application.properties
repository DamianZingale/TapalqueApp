spring.application.name=msvc-comercio
server.port=${PORT:0}
# cduando el el puerto es 0, se asigna un puerto aleatorio (lo hace spring boot)
# y se muestra en el log al iniciar la aplicacion
eureka.instance.instance-id=${spring.cloud.client.hostname}:${spring.application.name}:${random.int}
# para que el eureka registre la instancia con el nombre de la aplicacion y el puerto
# y el hostname de la maquina donde se ejecuta
eureka.instance.prefer-ip-address=true
# para que el eureka registre la instancia con la ip de la maquina en lugar del hostname
# y asi evitar problemas de resolucion de nombres en algunos entornos

#Para no conectar la base de datos
# spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

spring.datasource.url=jdbc:mysql://localhost:3306/portal_tpq_comercio_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=comercio_user  
#cambiar a root si es necesario el username y el password. En mi maquina funciona jaja 
#comercio_user
#7ap4lqu3
spring.datasource.password=7ap4lqu3
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Opciones de spring.jpa.hibernate.ddl-auto
# none → no toca nada de la BD (default en Spring Boot 3+).
# validate → solo valida que las tablas ya existan y coincidan con las entidades (lanza error si no).
# update → crea y modifica tablas/columnas según tus entidades (sin borrar datos).
# create → crea el esquema desde cero cada vez que arrancás (borra datos viejos).
# create-drop → igual que create, pero borra las tablas cuando la app se apaga.
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true

#registramos en el eureka con el nombre de la aplicacion y el puerto
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
spring.cloud.discovery.enabled=true


upload.dir=uploads
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB

